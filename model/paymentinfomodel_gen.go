// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paymentInfoFieldNames                = builder.RawFieldNames(&PaymentInfo{})
	paymentInfoRows                      = strings.Join(paymentInfoFieldNames, ",")
	paymentInfoRowsExpectAutoSet         = strings.Join(stringx.Remove(paymentInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	paymentInfoRowsWithPlaceHolder       = strings.Join(stringx.Remove(paymentInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
	STATE_FAILED                   int64 = 1
	STATE_PAYING                   int64 = 2
	STATE_SUCCESS                  int64 = 3
	STATE_MONEY_LESS               int64 = 4
)

type (
	paymentInfoModel interface {
		Insert(ctx context.Context, data *PaymentInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PaymentInfo, error)
		Update(ctx context.Context, data *PaymentInfo) error
		Delete(ctx context.Context, id int64) error
		GetPaymentInfoByOrderNum(ctx context.Context, orderNum string) (*PaymentInfo, error)
		EditPaymentTypeByID(ctx context.Context, id, paymentType int64) error
	}

	defaultPaymentInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PaymentInfo struct {
		Id            int64     `db:"id"`
		OrderNum      string    `db:"order_num"`       // 订单号
		Prices        float64   `db:"prices"`          // 支付金额
		OrderUserId   int64     `db:"order_user_id"`   // 订单所属用户ID
		PaymentUserId int64     `db:"payment_user_id"` // 支付用户ID(正常情况与order_user_id相同，当他人帮忙支付时不同)
		PaymentType   int64     `db:"payment_type"`    // 支付类型 1：微信 2：支付宝 3：银联 4：visa信用卡 5：账号余额
		PaymentId     int64     `db:"payment_id"`      // 支付ID
		PaymentCode   string    `db:"payment_code"`    // 支付串
		PaymentState  int64     `db:"payment_state"`   // 支付状态 1:支付不成功 2：支付中 3：支付成功 4：余额不足
		UpdateTime    time.Time `db:"update_time"`
		CreateTime    time.Time `db:"create_time"`
	}
)

func newPaymentInfoModel(conn sqlx.SqlConn) *defaultPaymentInfoModel {
	return &defaultPaymentInfoModel{
		conn:  conn,
		table: "`payment_info`",
	}
}

func (m *defaultPaymentInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPaymentInfoModel) FindOne(ctx context.Context, id int64) (*PaymentInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paymentInfoRows, m.table)
	var resp PaymentInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentInfoModel) GetPaymentInfoByOrderNum(ctx context.Context, orderNum string) (*PaymentInfo, error) {
	query := fmt.Sprintf("select %s from %s where `order_num` = ? limit 1", paymentInfoRows, m.table)
	var resp PaymentInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderNum)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentInfoModel) Insert(ctx context.Context, data *PaymentInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, paymentInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderNum, data.Prices, data.OrderUserId, data.PaymentUserId, data.PaymentType, data.PaymentId, data.PaymentCode, data.PaymentState)
	return ret, err
}

func (m *defaultPaymentInfoModel) Update(ctx context.Context, data *PaymentInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paymentInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrderNum, data.Prices, data.OrderUserId, data.PaymentUserId, data.PaymentType, data.PaymentId, data.PaymentCode, data.PaymentState, data.Id)
	return err
}

func (m *defaultPaymentInfoModel) EditPaymentTypeByID(ctx context.Context, id, paymentType int64) error {
	query := fmt.Sprintf("update %s set `payment_type` = ? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, paymentType, id)
	return err
}

func (m *defaultPaymentInfoModel) tableName() string {
	return m.table
}
